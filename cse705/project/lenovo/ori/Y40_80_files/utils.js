// Generated by CoffeeScript 1.7.1

/*
 * LENOVO.UTILS module
 * -------------------
 * Dependencies: LENOVO.MAIN, jQuery
 *
 * This module registers several utility functions, and adds methods/objects
 * under the LENOVO application namespace to be referenced by other modules.
 *
 * These utilities should not be required by the main LENOVO application (if
 * they do, then they should be added directly to that module) but instead
 * offer optional, common interfaces for other modules to use.
 *
 */
(function(app, $) {
  var o, self, _M, _base, _debug, _initialized, _verbose, _version;
  _M = "UTILS";
  _version = "2014-06-12";
  _base = window.long_url || "";
  _debug = window.debugAllowed || false;
  _verbose = false;
  _initialized = false;

  /*
   * Trigger events on jQuery show/hide events. Can be used with fadeIn, fadeOut,
   * and fadeTo methods as well (since they trigger the show/hide event at the
   * end of their animations).
   *
   * Usage:
   * $('#foo').on('show', function() {
   *   console.log('#foo is now visible');
   * }).on('hide', function() {
   *   console.log('#foo is hidden');
   * });
   */
  $.each(['show', 'hide'], function(i, ev) {
    var el;
    el = $.fn[ev];
    $.fn[ev] = function() {
      this.trigger(ev);
      return el.apply(this, arguments);
    };
  });

  /*
   * jQuery ":regex" Selector
   * http://james.padolsey.com/javascript/regex-selector-for-jquery/
   *
   * Pass an attribute and a regular expression to match against. The regular
   * expression must be in non-literal notation; so replace all backslashes
   * with two backslashes (e.g. ^\w+$ -> ^\\w+$). All searches are case
   * insensitive.
   *
   * Select all elements with an ID starting a vowel:
   * $(":regex(id,^[aeiou])"");
   *
   * Select all DIVs with classes that contain numbers:
   * $("div:regex(class,[0-9])");
   *
   * Select all elements with a width between 100 and 300:
   * $(":regex(css:width, ^[1-3]\\d{2}px$)");
   *
   * Select all NON block-level DIVs:
   * $("div:not(:regex(css:display, ^block$))");
   *
   * Add data property to all images (just an example);
   * $("img").each(function(){
   *   $(this).data("extension", $(this)[0].src.match(/\.(.{1,4})$/)[1]);
   * });
   *
   * Select all images with PNG or JPG extensions:
   * $("img:regex(data:extension, png|jpg)");
   */
  $.expr[":"].regex = function(elem, index, match) {
    var attr, matchParams, regex, regexFlags, validLabels;
    matchParams = match[3].split(",");
    validLabels = /^(data|css):/;
    attr = {
      method: matchParams[0].match(validLabels) ? matchParams[0].split(":")[0] : "attr",
      property: matchParams.shift().replace(validLabels, "")
    };
    regexFlags = "ig";
    regex = new RegExp(matchParams.join("").replace(/^\s+|\s+$/g, ""), regexFlags);
    return regex.test(jQuery(elem)[attr.method](attr.property));
  };

  /*
   * jQuery Tiny Pub/Sub
   * https://github.com/cowboy/jquery-tiny-pubsub
   *
   * Copyright (c) 2013 "Cowboy" Ben Alman
   * Licensed under the MIT license.
   */
  o = $({});
  $.subscribe = function() {
    o.on.apply(o, arguments);
  };
  $.unsubscribe = function() {
    o.off.apply(o, arguments);
  };
  $.publish = function() {
    o.trigger.apply(o, arguments);
  };
  self = app[_M] = {};
  self.urlParams = {};
  self.shouldRun = function() {
    return true;
  };
  self.init = function() {
    if (_debug) {
      console.info("LENOVO.UTILS: init");
    }
    $(window).on("popstate.urlparams", self.getUrlParams);
    self.getUrlParams();
  };
  self.isDebug = function() {
    if (self.urlParams.length < 1) {
      self.getUrlParams();
    }
    return self.urlParams.debugMode === "true" || (self.urlParams.debug === "true" || self.urlParams.debug === "verbose") || window.debugAllowed === true;
  };
  self.isVerbose = function() {
    return self.isDebug() && (self.urlParams.verbose === "true" || self.urlParams.debug === "verbose");
  };
  self.useDefaults = function() {
    return self.urlParams.defaults === "true";
  };
  self.getUrlParams = function(event) {
    var decode, m1, m2, match, pl, query, search;
    pl = /\+/g;
    search = /([^&=]+)=?([^&]*)/g;
    decode = function(s) {
      return decodeURIComponent(s.replace(pl, " "));
    };
    query = window.location.search.substring(1);
    while (match = search.exec(query)) {
      m1 = decode(match[1]);
      m2 = decode(match[2]);
      if (self.urlParams[m1] != null) {
        self.urlParams[m1] = self.urlParams[m1] + "," + m2;
      } else {
        self.urlParams[m1] = m2;
      }
    }
    window.urlParams = $.extend({}, self.urlParams);
  };
})(window.LENOVO = window.LENOVO || {}, jQuery);
