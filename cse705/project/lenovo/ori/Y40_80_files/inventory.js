// Generated by CoffeeScript 1.8.0

/*
 * Dependencies: LENOVO, jQuery
 *
 * This is the INVENTORY module in the LENOVO application namespace (referenced
 * as LENOVO.INVENTORY). This module is intended to provide support for dynamic
 * inventory lookup via the REST API delivered in FP 1660 during Release 24b.
 *
 * This is an alternative to the AvailabilityHandler method(s) created in JDA's
 * "WciInventory.js" file, the default functionality delivered with the
 * requirement.
 *
 * On the page, the settings can be configured via standard LENOVO configuration
 * object for a module, i.e.-
 *
 *   var LNV_options = window.LNV_options || {};
 *   LNV_options.INVENTORY_options = {
 *     availabilityWrapper: ".pricingSummary-shipping",
 *     ctaWrapper: ".tabbedBrowse-productListing-button-container",
 *     ctaButton: "a.button-full",
 *     disabledTemplate: "<button disabled=\"disabled\" style=\"width:100%; height:35px; border:1px solid #cecfce; background:#efefef; color:#999; font-weight:bold; text-transform:uppercase;\">Out of stock!</button>",
 *     esmClass: "rci-esm",
 *     hideDepletedItem: false,
 *     maximumReqInQueue: 4,
 *     maximumWaitTime: 2000,
 *     msgClass: "rci-msg",
 *     successFn: null,
 *     wrappingPrefix: ".item",
 *     wrappingSuffix: "oid",
 *     wrappingDelimiter: "_"
 *   };
 *
 * These settings will be applied when the main LENOVO application is run via
 * LENOVO.MAIN.start(), or upon the first request made for inventory levels for
 * an item on the a page.
 *
 * Inventory levels are retrieved asynchronously, and single items or groups of
 * multiple items can be bundled into a single request. An "item queue" is
 * created by calling LENOVO.INVENTORY.queue() from the page, passing in the
 * REST URL and data object of the item to lookup:
 *
 *   Single item:
 *     LENOVO.INVENTORY.queue("http://shop.lenovo.com/rci/services/inventory/1.0/LenovoPortal/web/availability", { Oid: ":00001234:0000ABCD:" });
 *
 *   Multiple items:
 *     var items = [{ Oid: ":00001234:0000ABCD:" }, { Oid: ":00002345:0000BCDE:" }, { Oid: ":00003456:0000CDEF:" }]
 *     LENOVO.INVENTORY.queue("http://shop.lenovo.com/rci/services/inventory/1.0/LenovoPortal/web/availability", items);
 *
 * This call collects items in an array and can send a single request via GET,
 * or multiple requests based on configuration with a maximum number of items
 * and maximum wait time to break up requests.
 */
(function(app, $) {
  var self, _M, _MAIN, _UTILS, _ajaxDefaults, _baseurl, _debug, _decodeHtml, _defaultConfig, _defaultItemFormat, _equalHeight, _initialized, _itemQueue, _onFail, _onSuccess, _parseItem, _timer, _url, _urls, _verbose, _version;
  _M = "INVENTORY";
  _version = "2014-11-11";
  _baseurl = window.long_url || "";
  _debug = window.debugAllowed || false;
  _verbose = false;
  _initialized = false;
  _urls = null;
  _MAIN = app.hasOwnProperty("MAIN");
  _UTILS = app.hasOwnProperty("UTILS");
  _ajaxDefaults = {
    url: "",
    data: "",
    dataType: "json",
    contentType: "application/json",
    type: "POST",
    cache: false
  };
  _defaultConfig = {
    availabilityWrapper: ".pricingSummary-shipping, .pricingSummary-expressShip",
    ctaWrapper: ".tabbedBrowse-productListing-button-container",
    ctaButton: "a.button-full",
    disabledTemplate: "<button disabled=\"disabled\" style=\"width:100%; height:35px; border:1px solid #cecfce; background:#efefef; color:#999; font-weight:bold; text-transform:uppercase;\">Out of stock!</button>",
    esmClass: "rci-esm",
    hideDepletedItem: false,
    maximumReqInQueue: 4,
    maximumWaitTime: 2000,
    msgClass: "rci-msg",
    successFn: null,
    wrappingPrefix: ".item",
    wrappingSuffix: "oid",
    wrappingDelimiter: "_"
  };
  _defaultItemFormat = {
    GroupName: "",
    ItemCode: "",
    Oid: ""
  };
  _itemQueue = [];
  _timer = [];
  _url = null;
  _decodeHtml = function(input) {
    var e;
    e = document.createElement("div");
    e.innerHTML = input;
    if (e.childNodes.length === 0) {
      return "";
    } else {
      return e.childNodes[0].nodeValue;
    }
  };
  _equalHeight = function(ele) {
    var t;
    t = 0;
    $(ele).css("height", "auto").each(function() {
      var h;
      h = $(this).height();
      if (h > t) {
        t = h;
      }
    }).height(t);
  };
  _onSuccess = function(data) {
    var items;
    if (_verbose) {
      console.group("LENOVO.INVENTORY: _onSuccess");
      console.log(data);
      console.groupEnd();
    }
    if (data.Items.Item) {
      items = $.makeArray(data.Items.Item);
      $.each(items, _parseItem);
      self.onResize();
      $(window).one("scroll.resize", self.onResize);
    }
  };
  _parseItem = function(index, item) {
    var $item, d, disabledBtn, esm, esmClass, groupname, itemcode, msg, msgClass, oid, pfx, sfx;
    $item = null;
    oid = item.Oid;
    groupname = item.GroupName;
    itemcode = item.ItemCode;
    d = self.settings.wrappingDelimiter;
    sfx = self.settings.wrappingSuffix.toLowerCase();
    pfx = self.settings.wrappingPrefix;
    msg = item.InventoryMessage;
    esm = item.EstimatedShipMessage;
    disabledBtn = _decodeHtml(self.settings.disabledTemplate);
    msgClass = "." + self.settings.msgClass;
    esmClass = "." + self.settings.esmClass;
    if (sfx === "oid" && oid !== "") {
      $item = $(pfx + oid.replace(/:/g, d));
    } else if (sfx === "itemgroup" && (groupname !== "" && itemcode !== "")) {
      $item = $(pfx + d + groupname + d + itemcode);
    }
    if (_verbose) {
      console.group("LENOVO.INVENTORY: _parseItem -> " + oid);
      console.log("$item[0] = " + $item[0]);
      console.log("msg = " + msg);
      console.log("esm = " + esm);
    }
    if ($item && item.IsValid === "true") {
      if (item.InInventory === "true") {
        $item.find(msgClass).html(msg).end().find(esmClass).html(esm);
      } else if (self.settings.hideDepletedItem === true) {
        $item.hide();
      } else {
        $item.find(msgClass).empty().end().find(esmClass).html(esm).end().find(self.settings.ctaWrapper).find(self.settings.ctaButton).replaceWith(disabledBtn);
      }
      self.onResize();
    } else {
      if (_debug) {
        console.warn("WARNING: Could not apply dynamic inventory to item.");
        console.group("Item details");
        console.groupCollapsed("Item wrapper:");
        console.log($item);
        console.groupEnd();
        console.groupCollapsed("Item JSON data:");
        console.log(item);
        console.groupEnd();
        console.groupEnd();
      }
      if (_verbose) {
        console.groupEnd();
      }
    }
  };
  _onFail = function(jqXHR, textStatus, errorThrown) {
    if (_verbose) {
      console.group("LENOVO.INVENTORY: _onFail");
      console.error("[" + textStatus + "]: " + errorThrown);
      console.log(jqXHR.responseText);
      console.groupEnd();
    }
  };
  self = app[_M] = {
    settings: null,
    callback: _onSuccess,
    onfail: _onFail,
    shouldRun: function() {
      return app.hasOwnProperty(_M);
    },
    init: function(options) {
      var LNV_options, debug, verbose;
      if (!_initialized) {
        if (_debug) {
          console.info("LENOVO.INVENTORY: init");
        }
        if (options == null) {
          LNV_options = window.LNV_options || {};
          options = LNV_options.inventory_options || {};
        }
        _MAIN = app.hasOwnProperty("MAIN");
        _UTILS = app.hasOwnProperty("UTILS");
        if (_UTILS) {
          debug = app.UTILS.isDebug();
          verbose = app.UTILS.isVerbose();
        }
        self.settings = $.extend(true, _defaultConfig, options);
        if ((typeof successFn !== "undefined" && successFn !== null) && $.isFunction(self.settings.successFn)) {
          self.callback = self.settings.successFn;
        }
        $(window).on(app.MAIN.resizeEventName || "debounced-resize", self.onResize);
        _initialized = true;
      }
    },

    /*
     * LENOVO.INVENTORY.queue(url, items) -> Called externally, this should
     *   collect requests then call LENOVO.INVENTORY.lookup with a bundled
     *   request object
     * @param  {String}   url      RCI (REST) URL
     * @param  {Array}    items    Array of Item objects to process
     */
    queue: function(url, items) {
      var LNV_options, config;
      if (url !== "" && typeof url === "string") {
        clearTimeout(_timer);
        items = $.makeArray(items);
        if (!_initialized) {
          LNV_options = window.LNV_options || {};
          config = LNV_options.INVENTORY_options || {};
          self.init(config.INVENTORY_options);
        }
        if (items.length < self.settings.maximumReqInQueue) {
          _url = url;
          $.merge(_itemQueue, items);
          _timer = setTimeout(self.process, self.settings.maximumWaitTime, _url, $.merge([], _itemQueue));
        } else {
          _url = url;
          self.process(_url, items);
        }
      }
    },

    /*
     * LENOVO.INVENTORY.process(url, items) -> Used to process an array of
     *   items, grouping them based on the maximumReqInQueue settings
     * @param  {String}   url     RCI (REST) URL
     * @param  {Array}    items   Array of Item objects to process
     */
    process: function(url, items) {
      var groups;
      groups = self.group(items);
      _itemQueue.length = 0;
      $.each(groups, function(i, group) {
        self.lookup(url, group);
      });
    },

    /*
     * LENOVO.INVENTORY.group(items) -> Formats item objects in an array to
     *   get them in the correct format for REST lookup, and then returns a
     *   nested array of smaller arrays based on the maximumReqInQueue setting
     * @param  {Array}  items   Array of item objects to format and group
     * @return {Array}          New array of array groups
     */
    group: function(items) {
      var groups, idx, len, max;
      items = $.makeArray(items);
      $.each(items, function(i, item) {
        items[i] = $.extend(true, {}, _defaultItemFormat, item);
      });
      groups = [];
      max = parseInt(self.settings.maximumReqInQueue, 10);
      idx = 0;
      len = items.length;
      while (idx < len) {
        groups.push(items.slice(idx, idx += max));
      }
      return groups;
    },

    /*
     * LENOVO.INVENTORY.lookup(url, params) -> Called externally, this
     *   performs a single item inventory request (synchronous).
     * @param  {String} url     RCI (REST) URL
     * @param  {Object} items   Array of items
     */
    lookup: function(url, items) {
      var req;
      items = $.makeArray(items);
      req = {
        Items: {
          Item: $.merge([], items)
        }
      };
      self.request({
        url: url,
        data: JSON.stringify(req),
        type: "POST"
      });
    },

    /*
     * LENOVO.INVENTORY.request(options) -> Performs an AJAX request to get
     *   item inventory levels based on the options passed into it.
     * @param  {[type]} options AJAX overrides for the request
     */
    request: function(options) {
      var LNV_options, config, settings;
      if (!_initialized) {
        LNV_options = window.LNV_options || {};
        config = LNV_options.INVENTORY_options || {};
        self.init(config.INVENTORY_options);
      }
      settings = $.extend(true, _ajaxDefaults, options);
      $.ajax(settings).done(self.callback).fail(self.onfail);
    },
    onResize: function() {
      var $avail, esm, msg;
      $avail = $(self.settings.availabilityWrapper);
      msg = "." + self.settings.msgClass;
      esm = "." + self.settings.esmClass;
      _equalHeight($avail.find(msg));
      _equalHeight($avail.find(esm));
      _equalHeight($avail);
      if (app.TABBEDBROWSE != null) {
        app.TABBEDBROWSE.matchHeights();
      }
    }
  };
})(window.LENOVO = window.LENOVO || {}, jQuery);


/*
 * https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout
 *
 * A completely unobtrusive hack for every other mobile or desktop browser,
 * including IE9 and above, using JavaScript conditional comments to provide
 * additional parameter support to the setTimeout/setInterval methods in < IE8.
 */

/*@cc_on
  //conditional IE < 9 only fix
  @if (@_jscript_version <= 6)
  (function(f){
    window.setTimeout =f(window.setTimeout);
    window.setInterval =f(window.setInterval);
  })(function(f){return function(c,t){var a=[].slice.call(arguments,2);return f(function(){c.apply(this,a)},t)}});
  @end
@*/;
