// Generated by CoffeeScript 1.8.0

/*
 * LENOVO.MODAL module
 * -------------------
 * Separate overlay + slider templates -> can force use of either with data-modaltype on link
 *
 * Example markup
 * - Minimum:
 *   <a href="/path/to/some/content.html" rel="modal">a link</a>
 * - Ideal (SEO + ARIA):
 *   <a href="/path/to/some/content.html" rel="modal" role="note" aria-haspopup="true">a link</a>
 *
 */
(function(app, $) {
  var $body, $close, $content, $document, $footer, $header, $html, $inner, $loader, $main, $origin, $overlay, $slider, $trigger, $window, self, _M, __isExternalUrl, __isHTML, __isImage, __isQuery, __isUrl, _addContent, _base, _breakPoints, _cleanUp, _debug, _defaults, _getContentType, _getModalSize, _getModalType, _initialized, _isIE, _isOpened, _isTouch, _launchModal, _mqSupported, _reposition, _resizeEventName, _setupModal, _showModal, _triggerModalResize, _verbose, _version;
  _M = "MODAL";
  _version = "2014-11-03";
  _base = window.long_url || "";
  _debug = window.debugAllowed || false;
  _verbose = false;
  _initialized = false;
  _breakPoints = {
    modalMobile: "(max-width: 30em)",
    modalTabletSmall: "(max-width: 44.95em)",
    modalTabletLarge: "(max-width: 59.95em)",
    modalDesktop: "(min-width: 60em)"
  };
  _isIE = /msie/i.test(navigator.userAgent);
  _isOpened = false;
  _isTouch = document.createTouch !== void 0;
  _mqSupported = false;
  _resizeEventName = "debounced-resize";
  _defaults = {
    triggers: "a[rel~='modal']",
    templateSources: ["/WW/site/templates/handlebars/owv2/modal.html"],
    templateNames: {
      loader: "modal_loader",
      main: "modal_main",
      overlay: "modal_overlay",
      slider: "modal_slider"
    },
    selectors: {
      main: ".lnvmodal-main",
      inner: ".lnvmodal-inner",
      header: ".lnvmodal-header",
      content: ".lnvmodal-content",
      footer: ".lnvmodal-footer",
      close: ".lnvmodal-close",
      overlay: ".lnvmodal-overlay",
      slider: ".lnvmodal-slider",
      loader: ".lnvmodal-loader"
    },
    labels: {
      close: "Close",
      closeThis: "Close this",
      loading: "Loading..."
    }
  };
  $body = $("body");
  $document = $(document);
  $html = $(document.documentElement);
  $window = $(window);
  $overlay = null;
  $slider = null;
  $main = null;
  $inner = null;
  $header = null;
  $content = null;
  $footer = null;
  $close = null;
  $loader = null;
  $trigger = null;
  $origin = null;

  /* helpers */
  __isHTML = function(str) {
    return (str != null) && $(str).length > 0;
  };
  __isQuery = function(obj) {
    return (obj != null) && obj.hasOwnProperty && obj instanceof $;
  };
  __isExternalUrl = function(url) {
    var d;
    d = function(u) {
      return u.replace("http://", "").replace("https://", "").replace("//", "").split("/")[0];
    };
    if (__isUrl(url) === true && d(url) !== "") {
      return d(window.location.href) !== d(url);
    } else {
      return false;
    }
  };
  __isImage = function(str) {
    var rgx;
    rgx = /(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|\#).*)?$)/i;
    return rgx.test(str);
  };
  __isUrl = function(str) {
    var rgx;
    rgx = /\(?(?:(http|https|ftp):\/\/)?(?:((?:[^\W\s]|\.|-|[:]{1})+)@{1})?((?:www.)?(?:[^\W\s]|\.|-)+[\.][^\W\s]{2,4}|localhost(?=\/)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::(\d*))?([\/]?[^\s\?]*[\/]{1})*(?:\/?([^\s\n\?\[\]\{\}\#]*(?:(?=\.)){1}|[^\s\n\?\[\]\{\}\.\#]*)?([\.]{1}[^\s\?\#]*)?)?(?:\?{1}([^\s\n\#\[\]]*))?([\#][^\s\n]*)?\)?/g;
    return rgx.test(str);
  };

  /* private functions */
  _getContentType = function(href) {
    var type;
    type = "iframe";
    if (__isImage(href)) {
      type = "image";
    } else if (__isExternalUrl(href)) {
      type = "iframe";
    } else if (__isUrl(href)) {
      type = "ajax";
    } else if (__isHTML(href)) {
      type = "html";
    }
    return type;
  };
  _getModalSize = function() {
    var breakPoints, i, key, sizes, _i, _len;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _getModalSize");
    }
    breakPoints = [];
    for (key in _breakPoints) {
      breakPoints.push(key);
    }
    sizes = [];
    for (_i = 0, _len = breakPoints.length; _i < _len; _i++) {
      i = breakPoints[_i];
      sizes.push(app.MAIN.activeBreakPoints[i]);
    }
    return breakPoints[sizes.indexOf(true)];
  };
  _getModalType = function(contentType) {
    var size, type;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _getModalType");
    }
    size = _getModalSize();
    if (size === "modalDesktop" || size === "modalTabletLarge") {
      type = "overlay";
    } else if (size === "modalTabletSmall" || (size === "modalMobile" && contentType !== "image")) {
      type = "slider";
    } else {
      type = "native";
    }
    return type;
  };
  _triggerModalResize = function() {
    var selectors;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _triggerModalResize");
    }
    _mqSupported = app.MAIN.activeBreakPoints.supported;
    if ($body == null) {
      $body = $("body");
    }
    selectors = self.settings != null ? self.settings.selectors : _defaults.selectors;
    if (_isOpened === true && _mqSupported === true && $body.find(selectors.overlay).length > 0) {
      selectors = self.settings.selectors || _defaults.selectors;
      if ($main === null || $main.length < 1) {
        $main = $body.find(selectors.main);
      }
      if ($inner === null || $inner.length < 1) {
        $inner = $body.find(selectors.inner);
      }
      _reposition($inner, $main);
    }
  };
  _reposition = function($child, $parent) {
    var content, left, size, top, wrapper;
    if ($child != null) {
      if (_verbose === true) {
        console.groupCollapsed("LENOVO.MODAL: _reposition");
      }
      if ($parent == null) {
        $parent = $window;
      }
      if (!__isQuery($child)) {
        $child = $($child);
      }
      if (!__isQuery($parent)) {
        $parent = $($parent);
      }
      size = _getModalSize();
      content = {
        h: $child[0].scrollHeight,
        w: $child[0].scrollWidth
      };
      if (_verbose === true) {
        console.log(content);
      }
      wrapper = {
        h: $parent.height(),
        w: $parent.width()
      };
      if (_verbose === true) {
        console.log(wrapper);
      }
      top = (Math.max(wrapper.h - content.h, 0) / 2) + $window.scrollTop();
      left = (Math.max(wrapper.w - content.w, 0) / 2) + $window.scrollLeft();
      if (size === "modalDesktop" || size === "modalTabletLarge") {
        $child.css({
          "left": left
        });
      } else {
        $child.css({
          "top": "",
          "left": ""
        });
      }
      if (_verbose === true) {
        console.log(size);
        console.log("left: " + left);
        console.groupEnd();
      }
    }
  };
  _setupModal = function(modalType) {
    var created, selectors, template;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _setupModal");
    }
    if ($body == null) {
      $body = $("body");
    }
    selectors = self.settings.selectors;
    created = $body.find(selectors.main).length > 0;
    if ((modalType != null) && created !== true) {
      app.TEMPLATES.getTemplate(self.settings.templateNames.main)();
      if (modalType === "overlay") {
        template = app.TEMPLATES.getTemplate(self.settings.templateNames.overlay)(self.settings.labels);
        $body.append(template);
        $overlay = $body.find(selectors.overlay);
      } else if (modalType === "slider") {
        template = app.TEMPLATES.getTemplate(self.settings.templateNames.slider)(self.settings.labels);
        $body.append(template);
        $slider = $(selectors.slider);
      }
      $main = $body.find(selectors.main);
      $header = $main.find(selectors.header);
      $content = $main.find(selectors.content);
      $footer = $main.find(selectors.footer);
      $close = $main.find(selectors.close);
      $close.one("click.close", self.closeModal);
    }
  };
  _launchModal = function(modalType, contentType, error, src) {
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _launchModal");
    }
    if (modalType !== "native") {
      $body.data("modalType", modalType);
    }
    if (contentType === "image" && modalType === "native" && _isTouch === true) {
      window.open(src, "modalContent");
    } else {
      self.showActivity();
      _addContent(contentType, src, error);
    }
  };
  _addContent = function(contentType, src, error) {
    var img, options;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _addContent");
    }
    if ((contentType != null) && (src != null)) {
      switch (contentType) {
        case "image":
          img = $("<img />").attr("src", src);
          $content.append(img);
          _showModal();
          break;
        case "ajax":
          if ((error != null) && error !== false) {
            options = {
              crossDomain: true,
              ignoreErrors: false,
              url: src,
              type: "GET",
              dataType: "html",
              beforeSend: function() {
                if (_verbose === true) {
                  console.info("AJAX modal request: " + src);
                }
              }
            };
            $.ajax(src, options).done(function(data, textStatus, xhr) {
              $content.html(data);
              _showModal();
            }).fail(function(xhr, textStatus, errorThrown) {
              if (_verbose === true) {
                console.log(xhr, textStatus, errorThrown);
              }
              if (typeof error === "string") {
                $content.load("" + error + "?errorStatus=" + (encodeURIComponent(textStatus)), _showModal);
              } else if (typeof error === "function") {
                error();
              }
            }).always(function() {
              if (!$.trim($content.html())) {
                _showModal();
              } else {
                self.hideActivity();
              }
            });
          } else {
            $content.load(src, _showModal);
          }
          break;
        case "iframe":
          $("<iframe />", {
            "src": src
          }).appendTo($content);
          _showModal();
          break;
        case "html":
          $(src).after("<a name=\"modal-origin\" data-src=\"" + src + "\" />");
          $content.append(src);
          _showModal();
          break;
        default:
          _addContent("iframe", src);
      }
    } else {
      self.hideActivity();
      if (_debug === true) {
        console.error("Unable to open modal. Content could not be validated.");
      }
    }
  };
  _showModal = function() {
    var footer, modalType, title;
    if ($trigger != null) {
      title = $trigger.data("title");
      footer = $trigger.data("footer");
      if (title !== "") {
        $header.find("h2").html(title);
      }
      if (footer !== "") {
        $footer.html(footer);
      }
    }
    modalType = $body.data("modalType");
    if (_isTouch === true || modalType === "slider") {
      $html.addClass("has-modal");
    }
    $main.addClass("is-active");
    self.hideActivity();
    _isOpened = true;
    setTimeout(_triggerModalResize, 10);
  };
  _cleanUp = function() {
    var modalType, selectors, source, src;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: _cleanUp");
    }
    selectors = self.settings != null ? self.settings.selectors : _defaults.selectors;
    if ($body == null) {
      $body = $("body");
    }
    if ($overlay == null) {
      $overlay = $body.find(selectors.overlay);
    }
    if ($slider == null) {
      $slider = $body.find(selectors.slider);
    }
    if ($trigger == null) {
      $trigger = $body.find("[data-modalsource=true]");
    }
    modalType = $body.data("modalType");
    $origin = $body.find("a[name='modal-origin']");
    if ($origin.length > 0) {
      src = $origin.data("src");
      source = $content.find(src);
      $origin.replaceWith(source);
    }
    $main.removeClass("is-active").parent().remove();
    $html.removeClass("has-modal");
    $body.removeData("modalType");
    $trigger.removeAttr("data-modalsource");
    $main = null;
    $inner = null;
    $header = null;
    $content = null;
    $footer = null;
    $close = null;
    $trigger = null;
    $origin = null;
  };
  self = app[_M] = {};
  self.settings = null;
  self.shouldRun = function() {
    return typeof window.Handlebars !== "undefined";
  };
  self.init = function(options) {
    var breakPointName;
    if (!_initialized && app.hasOwnProperty("TEMPLATES")) {
      if (app.hasOwnProperty("UTILS")) {
        _debug = app.UTILS.isDebug();
        _verbose = app.UTILS.isVerbose();
      }
      if (_debug === true) {
        console.info("LENOVO.MODAL: init");
      }
      if (options == null) {
        options = {};
      }
      self.settings = $.extend(true, {}, _defaults, options);
      _resizeEventName = app.MAIN.resizeEventName || "debounced-resize";
      if (app.MAIN.activeBreakPoints.hasOwnProperty("supported")) {
        _mqSupported = app.MAIN.activeBreakPoints.supported;
      }
      $body = $("body");
      $.extend(true, app.MAIN.breakPoints, _breakPoints);
      for (breakPointName in _breakPoints) {
        if (_breakPoints.hasOwnProperty(breakPointName)) {
          mediaCheck({
            media: app.MAIN.breakPoints[breakPointName],
            entry: app.MAIN.getBreakPointHandler(breakPointName, true),
            exit: app.MAIN.getBreakPointHandler(breakPointName, false)
          });
        }
      }
      app.TEMPLATES.precompile(self.settings.templateSources);
      $window.on(_resizeEventName + ".modal", _triggerModalResize);
      $document.on("keyup.modal", function(e) {
        if (e.keyCode === 27 && _isOpened === true) {
          closeModal();
        }
      });
      $body.on("click.modal", self.settings.triggers, self.openModalClick);
      _initialized = true;
    } else {
      if (_debug === true) {
        console.warn("Could not initialize MODAL. Missing required dependency: TEMPLATES.");
      }
    }
  };
  self.openModal = function(href, options) {
    var contentType, errorUrl, modalType, src;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: openModal");
    }
    if ((href != null) && typeof href === "string") {
      if ($body == null) {
        $body = $("body");
      }
      src = href;
      $trigger = $("<a href='" + src + "' />");
      $trigger.attr("data-modalsource", true);
      if ((options != null) && options.hasOwnProperty) {
        if (options.contentType != null) {
          contentType = options.contentType;
        }
        $trigger.attr("data-contenttype", contentType);
        if (options.modalType != null) {
          modalType = options.modalType;
        }
        $trigger.attr("data-modaltype", modalType);
        errorUrl = options.error != null ? options.error : false;
        $trigger.attr("data-error", errorUrl);
      }
      if (contentType == null) {
        contentType = _getContentType(src);
      }
      if (modalType == null) {
        modalType = _getModalType(contentType);
      }
      if (errorUrl == null) {
        errorUrl = false;
      }
      _setupModal(modalType);
      if (src != null) {
        _launchModal(modalType, contentType, errorUrl, src);
      }
    } else {
      if (_debug === true) {
        console.error("Could not open modal. Missing required \"href\" parameter.");
      }
    }
  };
  self.openModalClick = function(event) {
    var contentType, errorUrl, modalType, src;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: openModalClick");
    }
    if ($body == null) {
      $body = $("body");
    }
    $trigger = $(event.currentTarget);
    $trigger.attr("data-modalsource", true);
    src = $trigger.data("src") || $trigger.attr("href") || $trigger.data("content");
    errorUrl = $trigger.data("error") || false;
    if (errorUrl === "") {
      errorUrl = false;
    }
    contentType = $trigger.data("contenttype") || _getContentType(src);
    modalType = $trigger.data("modaltype") || _getModalType(contentType);
    _setupModal(modalType);
    if (src != null) {
      _launchModal(modalType, contentType, errorUrl, src);
    }
    if (modalType !== "native") {
      event.preventDefault();
    }
  };
  self.closeModal = function(event) {
    var modalType;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: closeModal");
    }
    if ($body == null) {
      $body = $("body");
    }
    modalType = $body.data("modalType");
    $html.removeClass("has-overlay");
    $main.removeClass("is-active");
    _isOpened = false;
    setTimeout(_cleanUp, 500);
    if (event != null) {
      event.preventDefault();
    }
  };
  self.showActivity = function(message) {
    var labels, loader, selectors, template;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: showActivity");
    }
    if (message == null) {
      message = "";
    }
    selectors = self.settings != null ? self.settings.selectors : _defaults.selectors;
    $loader = $body.find(selectors.loader);
    if ($body == null) {
      $body = $("body");
    }
    loader = self.settings != null ? self.settings.templateNames.loader : _defaults.templateNames.loader;
    labels = self.settings != null ? self.settings.labels : _defaults.labels;
    $.extend(true, labels, {
      "message": message
    });
    template = app.TEMPLATES.getTemplate(loader)(labels);
    if ($loader.length > 0) {
      $loader.replaceWith(template);
    } else {
      $body.append(template);
    }
    $loader = $body.find(selectors.loader);
    $loader.stop(true).fadeOut(0).fadeTo("fast", 0.9);
  };
  self.hideActivity = function() {
    var selectors;
    if (_verbose === true) {
      console.info("LENOVO.MODAL: hideActivity");
    }
    selectors = self.settings != null ? self.settings.selectors : _defaults.selectors;
    $loader = $body.find(selectors.loader);
    if ($body == null) {
      $body = $("body");
    }
    $loader.stop(true).fadeTo("slow", 0, function() {
      $loader.remove();
      $loader = null;
    });
  };
  window.openModal = self.openModal;
  window.closeModal = self.closeModal;
  window.showActivity = self.showActivity;
  window.hideActivity = self.hideActivity;
})(window.LENOVO = window.LENOVO || {}, jQuery);
